package RSGridWorld;

/* Nonessential class for constructing RSGridWorld domains from autogenerated files, and vice versa
 *
 * Files will be formatted as follows: a single string list that gives the following data in this order
 *
 * width, height,
 * num of types of obstacles, names of the obstacles, quantity of each type
 * (presumable start) position of the agent x,y
 * all obstacle instances, x,y,name
 * all location instances, x,y (all location instances are terminating states)
 *
 * Author Maxwell J Svetlik
 */

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.util.List;
import java.io.File;
import java.util.ArrayList;


import burlap.oomdp.core.ObjectClass;
import burlap.oomdp.core.ObjectInstance;
import burlap.oomdp.core.State;
import burlap.oomdp.core.Domain;


public class DomainToFile{
	
	State initialState;
	RSGridWorld rsgw;

	public DomainToFile(){

	}

	/*
	* Must supply the desired location of the file, the domain itself, and a state which is assumed to be the initial setup.
	*/
	public boolean toFile(String outputPath, RSGridWorld gw, State s){
		StringBuffer sbuf = new StringBuffer(256);
		int width = gw.getWidth();
		int height = gw.getHeight();
		
		ObjectInstance a = s.getObjectsOfClass(RSGridWorld.CLASSAGENT).get(0);
		List<ObjectInstance> locs = s.getObjectsOfClass(RSGridWorld.CLASSLOCATION);
		List<ObjectInstance> obst = s.getObjectsOfClass(RSGridWorld.CLASSOBSTACLE);

		String xa = RSGridWorld.ATTX;
		String ya = RSGridWorld.ATTY;
		String lt = RSGridWorld.ATTLOCTYPE;
		String na = RSGridWorld.ATTNAME;
		
		sbuf.append(width + "").append(",").append(height + "").append(",");
		sbuf.append(gw.OBSTACLECLASSNAMES.length).append(",");
		for(int i = 0; i < gw.OBSTACLECLASSNAMES.length; i++)
			sbuf.append(gw.OBSTACLECLASSNAMES[i]).append(",");
		sbuf.append(gw.NUMOBSTACLES).append(",");
		sbuf.append(a.getIntValForAttribute(xa)).append(",").append(a.getIntValForAttribute(ya));
		for(ObjectInstance l : obst){
			sbuf.append(",").append(l.getIntValForAttribute(xa)).append(",").append(l.getIntValForAttribute(ya)).append(",").append(l.getStringValForAttribute(na));
		}

		for(ObjectInstance l : locs){
			sbuf.append(",").append(l.getIntValForAttribute(xa)).append(",").append(l.getIntValForAttribute(ya)).append(",").append(l.getIntValForAttribute(lt));
		}

		BufferedWriter writer;
		try {
				writer = new BufferedWriter(new FileWriter(new File(outputPath)));
				writer.append(sbuf.toString());
				writer.flush();
			 	writer.close();
		} catch (FileNotFoundException e) {
			e.printStackTrace();
			return false;
		} catch (IOException e) {
			e.printStackTrace();
			return false;
		}
		return true;
	}

	//returns a domain initialized with the state read from the file
	//currently, NO support for multiple locations (terminating goal states)
	public boolean parseFile(String inputFilePath){
		
		BufferedReader br = null;
		String line = "";

		try {
	 			br = new BufferedReader(new FileReader(inputFilePath));
				line = br.readLine();
				String [] obcomps = line.split(",");
				int width = Integer.parseInt(obcomps[0]);
				int height = Integer.parseInt(obcomps[1]);
				int numObTypes = Integer.parseInt(obcomps[2]);
				String[] obnamelist = new String[numObTypes];
				for(int i = 0; i < numObTypes; i++){
					obnamelist[i] = obcomps[i+3];
				}
				int numObstacles = Integer.parseInt(obcomps[numObTypes + 3]);
				int ax = Integer.parseInt(obcomps[numObTypes + 4]);
				int ay = Integer.parseInt(obcomps[numObTypes + 5]);
				int correctedObstacleLength = numObTypes * numObstacles;
				
				rsgw = new RSGridWorld(width, height, obnamelist, numObstacles);

				int nl = obcomps.length - 1 - correctedObstacleLength;
				State s = rsgw.getOneAgentNLocationNObstacleState(rsgw.generateDomain() , nl, numObstacles);
				rsgw.setAgent(s, ax, ay);
				
				int numObsPlaced = 0;
				//start at 4 since the first 4 will always be present
				for(int i = 6+numObTypes; i < obcomps.length; i+=3){
					int lx = Integer.parseInt(obcomps[i]);
					int ly = Integer.parseInt(obcomps[i+1]);
					
					if( numObsPlaced < numObstacles*numObTypes){
						rsgw.setObstacle(s, numObsPlaced, lx, ly, obcomps[i+2]);
						numObsPlaced++;
					} else {
							rsgw.setLocation(s, 0, lx, ly);

						}
				}
				
				initialState = s;
				return true;
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
				if (br != null) {
					try {
						br.close();
					} catch (IOException e) {
						e.printStackTrace();
					}
				}
			}
		return false;
	}

	public State getState(){
		return initialState;
	}

	public RSGridWorld getDomain(){
		return rsgw;
	}
}